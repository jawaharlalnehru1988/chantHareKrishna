import { Component, OnInit, AfterViewInit, OnDestroy, HostBinding } from '@angular/core';
import { IonContent, IonButton, IonProgressBar, IonToast, IonAlert, IonIcon, IonFab, IonFabButton, IonHeader, IonToolbar, IonButtons, IonSelect, IonSelectOption, IonMenuButton } from '@ionic/angular/standalone';

import { Subscription } from 'rxjs';
import { addIcons } from 'ionicons';
import { flowerOutline, refreshOutline, languageOutline, closeOutline, musicalNotesOutline, musicalNotes, playOutline, pauseOutline, bonfireOutline } from 'ionicons/icons';
import { ThemeService } from '../services/theme.service';
import { LanguageService, LanguageType } from '../services/language.service';

interface LanguageContent {
  pageTitle: string;
  currentRound: string;
  roundsCompleted: string;
  mahaRounds: string;
  progressText: string;
  dailyGoal: string;
  dailyGoalProgress: string;
  chantText: string;
  chantSubtext: string;
  mahamantra1: string;
  mahamantra2: string;
  sriKrishnaCaitanyaMantra: string;
  prabhupadaMantra1: string;
  prabhupadaMantra2: string;
  resetCurrentRoundToast: string;
  resetRoundsCompletedToast: string;
  resetMahaRoundsToast: string;
  resetAllProgressToast: string;
  roundCompleteToast: string;
  mahaRoundCompleteToast: string;
  resetAllConfirmTitle: string;
  resetAllConfirmMessage: string;
  // Sound options translations
  soundOptions: {
    none: { name: string; description: string; };
    tick: { name: string; description: string; };
    prabhupada: { name: string; description: string; };
    continuous: { name: string; description: string; };
  };
}

interface LanguageOption {
  key: LanguageType;
  flag: string;
  name: string;
  description: string;
}

interface LanguageData {
  key: LanguageType;
  flag: string;
  name: string;
  description: string;
  content: LanguageContent;
}

type ChantSoundType = 'none' | 'tick' | 'prabhupada' | 'continuous';

interface SoundOption {
  key: ChantSoundType;
  icon: string;
  name: string;
  description: string;
}

@Component({
  selector: 'app-chant',
  templateUrl: './chant.page.html',
  styleUrls: ['./chant.page.scss'],
  standalone: true,
  imports: [IonButtons, IonToolbar, IonHeader,
    IonContent,
    IonButton,
    IonProgressBar,
    IonToast,
    IonAlert,
    IonIcon,
    IonFab,
    IonFabButton,
    IonSelect,
    IonSelectOption, IonMenuButton]
})
export class ChantPage implements OnInit, AfterViewInit, OnDestroy {

  @HostBinding('class') themeClass = '';

  presentingElement: HTMLElement | null = null;
  currentLanguage: LanguageType = 'english';
  currentSoundMode: ChantSoundType = 'none';
  private themeSubscription: Subscription = new Subscription();
  private languageSubscription: Subscription = new Subscription();

  // Language data array
  languageData: LanguageData[] = [
    {
      key: 'english',
      flag: 'ЁЯЗ║ЁЯЗ╕',
      name: 'English',
      description: 'English',
      content: {
        pageTitle: 'ЁЯХЙя╕П Mahamantra Chanting',
        currentRound: 'Current Round',
        roundsCompleted: 'Rounds Completed',
        mahaRounds: 'Maha Rounds',
        progressText: 'Chants in Current Round',
        dailyGoal: 'Daily Goal (16 Rounds)',
        dailyGoalProgress: 'Rounds Completed',
        chantText: 'Chant',
        chantSubtext: 'Hare Krishna',
        mahamantra1: 'Hare Krishna Hare Krishna Krishna Krishna Hare Hare',
        mahamantra2: 'Hare Rama Hare Rama Rama Rama Hare Hare',
        sriKrishnaCaitanyaMantra: 'Jai Sri Krishna Chaitanya prabhu Nithyananda Sri Advaita Gadhadara Sri Vasadi Goura Bhaktha Vrinda',
        prabhupadaMantra1: "Namah om Vishnupadaya Krishna Presthaya Bhootale Srimate Bhaktivedanta Swamin iti Namine",
        prabhupadaMantra2: "Namaste Saraswate Deve Goura Vani Pracharine nirvishesha Shunyavadim Paschatya Desa Tarine",
        resetCurrentRoundToast: 'ЁЯФД Current round reset! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД Rounds completed reset! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД Maha rounds reset! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД All progress reset successfully! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ Congratulations! Lord Krishna is pleased with you!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ Congratulations! Sri Prabhupada is pleased with you!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'Reset All Progress',
        resetAllConfirmMessage: 'Are you sure you want to reset ALL your chanting progress? This will reset Current Round, Rounds Completed, and Maha Rounds. This action cannot be undone.',
        soundOptions: {
          none: { name: 'No Sound', description: 'Silent chanting' },
          tick: { name: 'Tick Sound', description: 'Chant with tick sound' },
          prabhupada: { name: 'Prabhupada', description: 'Chant with Prabhupada' },
          continuous: { name: '108 Continues Chanting', description: 'Continuous Prabhupada chanting until 108' }
        }
      }
    },
    {
      key: 'tamil',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Tamil',
      description: 'родрооро┐ро┤рпН',
      content: {
        pageTitle: 'ЁЯХЙя╕П роороХро╛роороирпНродро┐ро░ роЬрокроорпН',
        currentRound: 'родро▒рпНрокрпЛродрпИроп роЪрпБро▒рпНро▒рпБ',
        roundsCompleted: 'роорпБроЯро┐роирпНрод роЪрпБро▒рпНро▒рпБроХро│рпН',
        mahaRounds: 'роороХро╛ роЪрпБро▒рпНро▒рпБроХро│рпН',
        progressText: 'родро▒рпНрокрпЛродрпИроп роЪрпБро▒рпНро▒ро┐ро▓рпН роЬрокроЩрпНроХро│рпН',
        dailyGoal: 'родро┐ройроЪро░ро┐ роЗро▓роХрпНроХрпБ (16 роЪрпБро▒рпНро▒рпБроХро│рпН)',
        dailyGoalProgress: 'роЪрпБро▒рпНро▒рпБроХро│рпН роорпБроЯро┐роирпНродродрпБ',
        chantText: 'роЬрокроорпН',
        chantSubtext: 'ро╣ро░рпЗ роХро┐ро░рпБро╖рпНрогро╛',
        mahamantra1: 'ро╣ро░рпЗ роХро┐ро░рпБро╖рпНрогро╛ ро╣ро░рпЗ роХро┐ро░рпБро╖рпНрогро╛ роХро┐ро░рпБро╖рпНрогро╛ роХро┐ро░рпБро╖рпНрогро╛ ро╣ро░рпЗ ро╣ро░рпЗ',
        mahamantra2: 'ро╣ро░рпЗ ро░ро╛рооро╛ ро╣ро░рпЗ ро░ро╛рооро╛ ро░ро╛рооро╛ ро░ро╛рооро╛ ро╣ро░рпЗ ро╣ро░рпЗ',
        sriKrishnaCaitanyaMantra: 'роЬрпЖропрпН ро╕рпНро░рпА роХро┐ро░рпБро╖рпНрог роЪрпИродройрпНроп рокро┐ро░рокрпБ роиро┐родрпНропро╛ройроирпНрод ро╕рпНро░рпА роЕродрпНро╡рпИрод роХродро╛родро░ ро╕рпНро░рпАро╡ро╛роЪро╛родро┐ роХрпМро░ рокроХрпНрод ро╡рпНро░рпБроирпНрод',
        prabhupadaMantra1: "роироо: роУроорпН ро╡ро┐ро╖рпНрогрпБрокро╛родро╛роп роХро┐ро░рпБро╖рпНрог рокрпНро░рпЗро╖рпНродро╛роп рокрпВродро▓рпЗ ро╕рпНро░рпАроородрпЗ рокроХрпНродро┐ро╡рпЗродро╛роирпНрод ро╕рпНро╡ро╛рооро┐ройрпН роЗродро┐ роиро╛рооро┐ройрпЗ",
        prabhupadaMantra2: "роирооро╕рпНродрпЗ ро╕ро╛ро░ро╕рпНро╡родрпЗ родрпЗро╡рпЗ роХрпМро░ ро╡ро╛рогро┐ рокрпНро░ро╛роЪро╛ро░ро┐рогрпЗ роиро┐ро░рпНро╡ро┐ро╖рпЗро╖ ро╕рпВройрпНропро╡ро╛родро┐роорпН рокро╛ро╖рпНро╕ро╛родрпНроп родрпЗро╖ родро╛ро░ро┐рогрпЗ",
        resetCurrentRoundToast: 'ЁЯФД родро▒рпНрокрпЛродрпИроп роЪрпБро▒рпНро▒рпБ роорпАроЯрпНроЯроорпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД роорпБроЯро┐роирпНрод роЪрпБро▒рпНро▒рпБроХро│рпН роорпАроЯрпНроЯроорпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД роороХро╛ роЪрпБро▒рпНро▒рпБроХро│рпН роорпАроЯрпНроЯроорпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД роЕройрпИродрпНродрпБ роорпБройрпНройрпЗро▒рпНро▒роорпБроорпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роорпАроЯрпНроЯроорпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ ро╡ро╛ро┤рпНродрпНродрпБроХрпНроХро│рпН! роХро┐ро░рпБро╖рпНрог рокроХро╡ро╛ройрпН роЙроЩрпНроХро│рпИ роороХро┐ро┤рпНро╡ро┐родрпНродрпБро│рпНро│ро╛ро░рпН!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ ро╡ро╛ро┤рпНродрпНродрпБроХрпНроХро│рпН! ро╕рпНро░рпАро▓ рокро┐ро░рокрпБрокро╛родро░рпН роЙроЩрпНроХро│рпИ роороХро┐ро┤рпНро╡ро┐родрпНродрпБро│рпНро│ро╛ро░рпН!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'роЕройрпИродрпНродрпБ роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИропрпБроорпН роорпАроЯрпНроЯроорпИ',
        resetAllConfirmMessage: 'роЙроЩрпНроХро│рпН роЕройрпИродрпНродрпБ роЬрок роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИропрпБроорпН роорпАроЯрпНроЯроорпИроХрпНроХ роирпАроЩрпНроХро│рпН роЙро▒рпБродро┐ропро╛роХ роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│ро╛? роЗродрпБ родро▒рпНрокрпЛродрпИроп роЪрпБро▒рпНро▒рпБ, роорпБроЯро┐роирпНрод роЪрпБро▒рпНро▒рпБроХро│рпН рооро▒рпНро▒рпБроорпН роороХро╛ роЪрпБро▒рпНро▒рпБроХро│рпИ роорпАроЯрпНроЯроорпИроХрпНроХрпБроорпН. роЗроирпНрод роЪрпЖропро▓рпИ роЪрпЖропро▓рпНродро╡ро┐ро░рпНроХрпНроХ роорпБроЯро┐ропро╛родрпБ.',
        soundOptions: {
          none: { name: 'роТро▓ро┐ роЗро▓рпНро▓рпИ', description: 'роЕроорпИродро┐ропро╛рой роЬрокроорпН' },
          tick: { name: 'роЯро┐роХрпН роТро▓ро┐', description: 'роЯро┐роХрпН роТро▓ро┐ропрпБроЯройрпН роЬрокроорпН' },
          prabhupada: { name: 'рокро┐ро░рокрпБрокро╛родро░рпН', description: 'рокро┐ро░рокрпБрокро╛родро░рпБроЯройрпН роЬрокроорпН' },
          continuous: { name: '108 родрпКроЯро░рпНроЪрпНроЪро┐ропро╛рой роЬрокроорпН', description: '108 ро╡ро░рпИ родрпКроЯро░рпНроЪрпНроЪро┐ропро╛рой рокро┐ро░рокрпБрокро╛родро░рпН роЬрокроорпН' }
        }
      }
    },
    {
      key: 'hindi',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Hindi',
      description: 'рд╣рд┐рдиреНрджреА',
      content: {
        pageTitle: 'ЁЯХЙя╕П рдорд╣рд╛рдордВрддреНрд░ рдЬрдк',
        currentRound: 'рд╡рд░реНрддрдорд╛рди рдЪрдХреНрд░',
        roundsCompleted: 'рдкреВрд░реНрдг рдЪрдХреНрд░',
        mahaRounds: 'рдорд╣рд╛ рдЪрдХреНрд░',
        progressText: 'рд╡рд░реНрддрдорд╛рди рдЪрдХреНрд░ рдореЗрдВ рдЬрдк',
        dailyGoal: 'рджреИрдирд┐рдХ рд▓рдХреНрд╖реНрдп (16 рдЪрдХреНрд░)',
        dailyGoalProgress: 'рдЪрдХреНрд░ рдкреВрд░реНрдг',
        chantText: 'рдЬрдк',
        chantSubtext: 'рд╣рд░реЗ рдХреГрд╖реНрдг',
        mahamantra1: 'рд╣рд░реЗ рдХреГрд╖реНрдг рд╣рд░реЗ рдХреГрд╖реНрдг рдХреГрд╖реНрдг рдХреГрд╖реНрдг рд╣рд░реЗ рд╣рд░реЗ',
        mahamantra2: 'рд╣рд░реЗ рд░рд╛рдо рд╣рд░реЗ рд░рд╛рдо рд░рд╛рдо рд░рд╛рдо рд╣рд░реЗ рд╣рд░реЗ',
        sriKrishnaCaitanyaMantra: 'рдЬрдп рд╢реНрд░реА рдХреГрд╖реНрдг рдЪреИрддрдиреНрдп рдкреНрд░рднреБ рдирд┐рддреНрдпрд╛рдирдВрдж рд╢реНрд░реА рдЕрджреНрд╡реИрдд рдЧрджрд╛рдзрд░ рд╢реНрд░реАрд╡рд╛рд╕рд╛рджрд┐ рдЧреМрд░ рднрдХреНрдд рд╡реГрдВрджрд╛',
        prabhupadaMantra1: 'рдирдордГ рдУрдВ рд╡рд┐рд╖реНрдгреБрдкрд╛рджрд╛рдп рдХреГрд╖реНрдг рдкреНрд░реЗрд╖реНрдард╛рдп рднреВрддрд▓реЗ рд╢реНрд░реАрдорддреЗ рднрдХреНрддрд┐рд╡реЗрджрд╛рдиреНрдд рд╕реНрд╡рд╛рдорд┐рди рдЗрддрд┐ рдирд╛рдорд┐рди',
        prabhupadaMantra2: 'рдирдорд╕реНрддреЗ рд╕рд╛рд░рд╕реНрд╡рддреЗ рджреЗрд╡реЗ рдЧреМрд░ рд╡рд╛рдгреА рдкреНрд░рдЪрд╛рд░рд┐рдгреЗ рдирд┐рд░реНрд╡рд┐рд╢реЗрд╖ рд╢реВрдиреНрдпрд╡рд╛рджрд┐рдо рдкрд╛рд╢реНрдЪрд╛рддреНрдп рджреЗрд╢ рддрд╛рд░рд┐рдгреЗ',
        resetCurrentRoundToast: 'ЁЯФД рд╡рд░реНрддрдорд╛рди рдЪрдХреНрд░ рд░реАрд╕реЗрдЯ рд╣реЛ рдЧрдпрд╛! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД рдкреВрд░реНрдг рдЪрдХреНрд░ рд░реАрд╕реЗрдЯ рд╣реЛ рдЧрдП! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД рдорд╣рд╛ рдЪрдХреНрд░ рд░реАрд╕реЗрдЯ рд╣реЛ рдЧрдП! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД рд╕рднреА рдкреНрд░рдЧрддрд┐ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░реАрд╕реЗрдЯ рд╣реЛ рдЧрдИ! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ рдмрдзрд╛рдИ рд╣реЛ! рднрдЧрд╡рд╛рди рдХреГрд╖реНрдг рдЖрдкрд╕реЗ рдкреНрд░рд╕рдиреНрди рд╣реИрдВ!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ рдмрдзрд╛рдИ рд╣реЛ! рд╢реНрд░реАрд▓ рдкреНрд░рднреБрдкрд╛рдж рдЖрдкрд╕реЗ рдкреНрд░рд╕рдиреНрди рд╣реИрдВ!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'рд╕рднреА рдкреНрд░рдЧрддрд┐ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ',
        resetAllConfirmMessage: 'рдХреНрдпрд╛ рдЖрдк рд╡рд╛рдХрдИ рдЕрдкрдиреА рд╕рднреА рдЬрдк рдкреНрд░рдЧрддрд┐ рдХреЛ рд░реАрд╕реЗрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? рдпрд╣ рд╡рд░реНрддрдорд╛рди рдЪрдХреНрд░, рдкреВрд░реНрдг рдЪрдХреНрд░ рдФрд░ рдорд╣рд╛ рдЪрдХреНрд░ рдХреЛ рд░реАрд╕реЗрдЯ рдХрд░ рджреЗрдЧрд╛ред рдпрд╣ рдХреНрд░рд┐рдпрд╛ рдкреВрд░реНрд╡рд╡рдд рдирд╣реАрдВ рдХреА рдЬрд╛ рд╕рдХрддреАред',
        soundOptions: {
          none: { name: 'рдХреЛрдИ рдЖрд╡рд╛рдЬ рдирд╣реАрдВ', description: 'рдореМрди рдЬрдк' },
          tick: { name: 'рдЯрд┐рдХ рдзреНрд╡рдирд┐', description: 'рдЯрд┐рдХ рдзреНрд╡рдирд┐ рдХреЗ рд╕рд╛рде рдЬрдк' },
          prabhupada: { name: 'рдкреНрд░рднреБрдкрд╛рдж', description: 'рдкреНрд░рднреБрдкрд╛рдж рдХреЗ рд╕рд╛рде рдЬрдк' },
          continuous: { name: '108 рдирд┐рд░рдВрддрд░ рдЬрдк', description: '108 рддрдХ рдирд┐рд░рдВрддрд░ рдкреНрд░рднреБрдкрд╛рдж рдЬрдк' }
        }
      }
    },
    {
      key: 'telugu',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Telugu',
      description: 'р░др▒Жр░▓р▒Бр░Чр▒Б',
      content: {
        pageTitle: 'ЁЯХЙя╕П р░ор░╣р░╛р░ор░Вр░др▒Нр░░ р░Ьр░кр░В',
        currentRound: 'р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░Ър░Хр▒Нр░░р░В',
        roundsCompleted: 'р░кр▒Вр░░р▒Нр░др░пр░┐р░и р░Ър░Хр▒Нр░░р░╛р░▓р▒Б',
        mahaRounds: 'р░ор░╣р░╛ р░Ър░Хр▒Нр░░р░╛р░▓р▒Б',
        progressText: 'р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░Ър░Хр▒Нр░░р░Вр░▓р▒Л р░Ьр░кр░╛р░▓р▒Б',
        dailyGoal: 'р░жр▒Ир░ир░Вр░жр░┐р░и р░▓р░Хр▒Нр░╖р▒Нр░пр░В (16 р░Ър░Хр▒Нр░░р░╛р░▓р▒Б)',
        dailyGoalProgress: 'р░Ър░Хр▒Нр░░р░╛р░▓р▒Б р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐',
        chantText: 'р░Ьр░кр░В',
        chantSubtext: 'р░╣р░░р▒З р░Хр▒Гр░╖р▒Нр░г',
        mahamantra1: 'р░╣р░░р▒З р░Хр▒Гр░╖р▒Нр░г р░╣р░░р▒З р░Хр▒Гр░╖р▒Нр░г р░Хр▒Гр░╖р▒Нр░г р░Хр▒Гр░╖р▒Нр░г р░╣р░░р▒З р░╣р░░р▒З',
        mahamantra2: 'р░╣р░░р▒З р░░р░╛р░о р░╣р░░р▒З р░░р░╛р░о р░░р░╛р░о р░░р░╛р░о р░╣р░░р▒З р░╣р░░р▒З',
        sriKrishnaCaitanyaMantra: 'р░Ьр▒И р░╢р▒Нр░░р▒А р░Хр▒Гр░╖р▒Нр░г р░Ър▒Ир░др░ир▒Нр░п р░кр▒Нр░░р░нр▒Б р░ир░┐р░др▒Нр░пр░╛р░ир░Вр░ж р░╢р▒Нр░░р▒А р░Ер░жр▒Нр░╡р▒Ир░д р░Чр░жр░╛р░зр░░ р░╢р▒Нр░░р▒Ар░╡р░╛р░╕р░╛р░жр░┐ р░Чр▒Мр░░ р░нр░Хр▒Нр░д р░╡р▒Гр░Вр░жр░╛',
        prabhupadaMantra1: 'р░ир░ор░Г р░Ур░В р░╡р░┐р░╖р▒Нр░гр▒Бр░кр░╛р░жр░╛р░п р░Хр▒Гр░╖р▒Нр░г р░кр▒Нр░░р▒Зр░╖р▒Нр░ер░╛р░п р░нр▒Вр░др░▓р▒З р░╢р▒Нр░░р▒Ар░ор░др▒З р░нр░Хр▒Нр░др░┐р░╡р▒Зр░жр░╛р░Вр░д р░╕р▒Нр░╡р░╛р░ор░┐р░ир▒Н р░Зр░др░┐ р░ир░╛р░ор░┐р░ир▒З',
        prabhupadaMantra2: 'р░ир░ор░╕р▒Нр░др▒З р░╕р░╛р░░р░╕р▒Нр░╡р░др▒З р░жр▒Зр░╡р▒З р░Чр▒Мр░░ р░╡р░╛р░гр░┐ р░кр▒Нр░░р░Ър░╛р░░р░┐р░гр▒З р░ир░┐р░░р▒Нр░╡р░┐р░╖р▒Зр░╖ р░╢р▒Вр░ир▒Нр░пр░╡р░╛р░жр░┐р░В р░кр░╛р░╢р▒Нр░Ър░╛р░др▒Нр░п р░жр▒Зр░╢ р░др░╛р░░р░┐р░гр▒З',
        resetCurrentRoundToast: 'ЁЯФД р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░Ър░Хр▒Нр░░р░В р░░р▒Ар░╕р▒Жр░Яр▒Н р░Ер░пр░┐р░Вр░жр░┐! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД р░кр▒Вр░░р▒Нр░др░пр░┐р░и р░Ър░Хр▒Нр░░р░╛р░▓р▒Б р░░р▒Ар░╕р▒Жр░Яр▒Н р░Ер░пр▒Нр░пр░╛р░пр░┐! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД р░ор░╣р░╛ р░Ър░Хр▒Нр░░р░╛р░▓р▒Б р░░р▒Ар░╕р▒Жр░Яр▒Н р░Ер░пр▒Нр░пр░╛р░пр░┐! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД р░Ер░ир▒Нр░ир░┐ р░кр▒Нр░░р░Чр░др░┐ р░╡р░┐р░Ьр░пр░╡р░Вр░др░Вр░Чр░╛ р░░р▒Ар░╕р▒Жр░Яр▒Н р░Ер░пр░┐р░Вр░жр░┐! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ р░Ер░нр░┐р░ир░Вр░жр░ир░▓р▒Б! р░╢р▒Нр░░р▒А р░Хр▒Гр░╖р▒Нр░г р░нр░Чр░╡р░╛р░ир▒Н р░ор▒Ар░др▒Л р░╕р░Вр░др▒Лр░╖р░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ р░Ер░нр░┐р░ир░Вр░жр░ир░▓р▒Б! р░╢р▒Нр░░р▒А р░кр▒Нр░░р░нр▒Бр░кр░╛р░жр▒Н р░ор▒Ар░др▒Л р░╕р░Вр░др▒Лр░╖р░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'р░Ер░ир▒Нр░ир░┐ р░кр▒Нр░░р░Чр░др░┐р░ир░┐ р░░р▒Ар░╕р▒Жр░Яр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
        resetAllConfirmMessage: 'р░ор▒Ар░░р▒Б р░ор▒А р░Ер░ир▒Нр░ир░┐ р░Ьр░к р░кр▒Нр░░р░Чр░др░┐р░ир░┐ р░░р▒Ар░╕р▒Жр░Яр▒Н р░Ър▒Зр░пр░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р░╛? р░Зр░жр░┐ р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░Ър░Хр▒Нр░░р░В, р░кр▒Вр░░р▒Нр░др░пр░┐р░и р░Ър░Хр▒Нр░░р░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░ор░╣р░╛ р░Ър░Хр▒Нр░░р░╛р░▓р░ир▒Б р░░р▒Ар░╕р▒Жр░Яр▒Н р░Ър▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐. р░И р░Ър░░р▒Нр░пр░ир▒Б р░др░┐р░░р░┐р░Чр░┐ р░др▒Ар░╕р▒Бр░Хр▒Лр░▓р▒Зр░ор▒Б.',
        soundOptions: {
          none: { name: 'р░╢р░мр▒Нр░жр░В р░▓р▒Зр░жр▒Б', description: 'р░ир░┐р░╢р▒Нр░╢р░мр▒Нр░ж р░Ьр░кр░В' },
          tick: { name: 'р░Яр░┐р░Хр▒Н р░╢р░мр▒Нр░жр░В', description: 'р░Яр░┐р░Хр▒Н р░╢р░мр▒Нр░жр░Вр░др▒Л р░Ьр░кр░В' },
          prabhupada: { name: 'р░кр▒Нр░░р░нр▒Бр░кр░╛р░жр▒Н', description: 'р░кр▒Нр░░р░нр▒Бр░кр░╛р░жр▒НтАМр░др▒Л р░Ьр░кр░В' },
          continuous: { name: '108 р░ир░┐р░░р░Вр░др░░ р░Ьр░кр░В', description: '108 р░╡р░░р░Хр▒Б р░ир░┐р░░р░Вр░др░░ р░кр▒Нр░░р░нр▒Бр░кр░╛р░жр▒Н р░Ьр░кр░В' }
        }
      }
    },
    {
      key: 'kannada',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Kannada',
      description: 'р▓Хр▓ир│Нр▓ир▓б',
      content: {
        pageTitle: 'ЁЯХЙя╕П р▓ор▓╣р▓╛р▓ор▓Вр▓др│Нр▓░ р▓Ьр▓к',
        currentRound: 'р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓Ър▓Хр│Нр▓░',
        roundsCompleted: 'р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓б р▓Ър▓Хр│Нр▓░р▓Чр▓│р│Б',
        mahaRounds: 'р▓ор▓╣р▓╛ р▓Ър▓Хр│Нр▓░р▓Чр▓│р│Б',
        progressText: 'р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓Ър▓Хр│Нр▓░р▓жр▓▓р│Нр▓▓р▓┐ р▓Ьр▓кр▓Чр▓│р│Б',
        dailyGoal: 'р▓жр│Ир▓ир▓Вр▓жр▓┐р▓и р▓Чр│Бр▓░р▓┐ (16 р▓Ър▓Хр│Нр▓░р▓Чр▓│р│Б)',
        dailyGoalProgress: 'р▓Ър▓Хр│Нр▓░р▓Чр▓│р│Б р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓бр▓╡р│Б',
        chantText: 'р▓Ьр▓к',
        chantSubtext: 'р▓╣р▓░р│З р▓Хр│Гр▓╖р│Нр▓г',
        mahamantra1: 'р▓╣р▓░р│З р▓Хр│Гр▓╖р│Нр▓г р▓╣р▓░р│З р▓Хр│Гр▓╖р│Нр▓г р▓Хр│Гр▓╖р│Нр▓г р▓Хр│Гр▓╖р│Нр▓г р▓╣р▓░р│З р▓╣р▓░р│З',
        mahamantra2: 'р▓╣р▓░р│З р▓░р▓╛р▓о р▓╣р▓░р│З р▓░р▓╛р▓о р▓░р▓╛р▓о р▓░р▓╛р▓о р▓╣р▓░р│З р▓╣р▓░р│З',
        sriKrishnaCaitanyaMantra: 'р▓Ьр│И р▓╢р│Нр▓░р│А р▓Хр│Гр▓╖р│Нр▓г р▓Ър│Ир▓др▓ир│Нр▓п р▓кр│Нр▓░р▓нр│Б р▓ир▓┐р▓др│Нр▓пр▓╛р▓ир▓Вр▓ж р▓╢р│Нр▓░р│А р▓Ер▓жр│Нр▓╡р│Ир▓д р▓Чр▓жр▓╛р▓зр▓░ р▓╢р│Нр▓░р│Ар▓╡р▓╛р▓╕р▓╛р▓жр▓┐ р▓Чр│Мр▓░ р▓нр▓Хр│Нр▓д р▓╡р│Гр▓Вр▓ж',
        prabhupadaMantra1: 'р▓ир▓ор▓Г р▓Ур▓В р▓╡р▓┐р▓╖р│Нр▓гр│Бр▓кр▓╛р▓жр▓╛р▓п р▓Хр│Гр▓╖р│Нр▓г р▓кр│Нр▓░р│Зр▓╖р│Нр▓Яр▓╛р▓п р▓нр│Вр▓др▓▓р│З р▓╢р│Нр▓░р│Ар▓ор▓др│З р▓нр▓Хр│Нр▓др▓┐р▓╡р│Зр▓жр▓╛р▓Вр▓д р▓╕р│Нр▓╡р▓╛р▓ор▓┐р▓ир│Н р▓Зр▓др▓┐ р▓ир▓╛р▓ор▓┐р▓ир│З',
        prabhupadaMantra2: 'р▓ир▓ор▓╕р│Нр▓др│З р▓╕р▓╛р▓░р▓╕р│Нр▓╡р▓др│З р▓жр│Зр▓╡р│З р▓Чр│Мр▓░ р▓╡р▓╛р▓гр▓┐ р▓кр│Нр▓░р▓╕р▓╛р▓░р▓┐р▓гр│З р▓ир▓┐р▓░р│Нр▓╡р▓┐р▓╖р│Зр▓╖ р▓╢р│Вр▓ир│Нр▓пр▓╡р▓╛р▓жр▓┐р▓В р▓кр▓╛р▓╢р│Нр▓Ър▓╛р▓др│Нр▓п р▓жр│Зр▓╢ р▓др▓╛р▓░р▓┐р▓гр│З',
        resetCurrentRoundToast: 'ЁЯФД р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓Ър▓Хр│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓ор▓░р│Бр▓╕р│Жр▓Яр│Н р▓ор▓╛р▓бр▓▓р▓╛р▓Чр▓┐р▓жр│Ж! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓б р▓Ър▓Хр│Нр▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓ор▓░р│Бр▓╕р│Жр▓Яр│Н р▓ор▓╛р▓бр▓▓р▓╛р▓Чр▓┐р▓жр│Ж! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД р▓ор▓╣р▓╛ р▓Ър▓Хр│Нр▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓ор▓░р│Бр▓╕р│Жр▓Яр│Н р▓ор▓╛р▓бр▓▓р▓╛р▓Чр▓┐р▓жр│Ж! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД р▓Ор▓▓р│Нр▓▓р▓╛ р▓кр│Нр▓░р▓Чр▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓пр▓╢р▓╕р│Нр▓╡р▓┐р▓пр▓╛р▓Чр▓┐ р▓ор▓░р│Бр▓╕р│Жр▓Яр│Н р▓ор▓╛р▓бр▓▓р▓╛р▓Чр▓┐р▓жр│Ж! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ р▓Ер▓нр▓┐р▓ир▓Вр▓жр▓ир│Жр▓Чр▓│р│Б! р▓╢р│Нр▓░р│А р▓Хр│Гр▓╖р│Нр▓г р▓нр▓Чр▓╡р▓╛р▓ир│Н р▓ир▓┐р▓ор│Нр▓ор▓┐р▓Вр▓ж р▓╕р▓Вр▓др│Лр▓╖р▓Чр│Кр▓Вр▓бр▓┐р▓жр│Нр▓жр▓╛р▓░р│Ж!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ р▓Ер▓нр▓┐р▓ир▓Вр▓жр▓ир│Жр▓Чр▓│р│Б! р▓╢р│Нр▓░р│Ар▓▓ р▓кр│Нр▓░р▓нр│Бр▓кр▓╛р▓ж р▓ир▓┐р▓ор│Нр▓ор▓┐р▓Вр▓ж р▓╕р▓Вр▓др│Лр▓╖р▓Чр│Кр▓Вр▓бр▓┐р▓жр│Нр▓жр▓╛р▓░р│Ж!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'р▓Ор▓▓р│Нр▓▓р▓╛ р▓кр│Нр▓░р▓Чр▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓ор▓░р│Бр▓╕р│Жр▓Яр│Н р▓ор▓╛р▓бр▓┐',
        resetAllConfirmMessage: 'р▓ир│Ар▓╡р│Б р▓ир▓┐р▓ор│Нр▓о р▓Ор▓▓р│Нр▓▓р▓╛ р▓Ьр▓к р▓кр│Нр▓░р▓Чр▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓ор▓░р│Бр▓╕р│Жр▓Яр│Н р▓ор▓╛р▓бр▓▓р│Б р▓Цр▓Ър▓┐р▓др▓╡р▓╛р▓Чр▓┐р▓жр│Нр▓жр│Ар▓░р▓╛? р▓Зр▓жр│Б р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓Ър▓Хр│Нр▓░, р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓б р▓Ър▓Хр│Нр▓░р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓ор▓╣р▓╛ р▓Ър▓Хр│Нр▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓ор▓░р│Бр▓╕р│Жр▓Яр│Н р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓жр│Ж. р▓И р▓Хр│Нр▓░р▓┐р▓пр│Жр▓пр▓ир│Нр▓ир│Б р▓╣р▓┐р▓Вр▓жр▓┐р▓░р│Бр▓Чр▓┐р▓╕р▓▓р▓╛р▓Чр│Бр▓╡р│Бр▓жр▓┐р▓▓р│Нр▓▓.',
        soundOptions: {
          none: { name: 'р▓зр│Нр▓╡р▓ир▓┐ р▓Зр▓▓р│Нр▓▓', description: 'р▓ор│Мр▓и р▓Ьр▓к' },
          tick: { name: 'р▓Яр▓┐р▓Хр│Н р▓зр│Нр▓╡р▓ир▓┐', description: 'р▓Яр▓┐р▓Хр│Н р▓зр│Нр▓╡р▓ир▓┐р▓пр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓Ьр▓к' },
          prabhupada: { name: 'р▓кр│Нр▓░р▓нр│Бр▓кр▓╛р▓ж', description: 'р▓кр│Нр▓░р▓нр│Бр▓кр▓╛р▓жр▓░р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓Ьр▓к' },
          continuous: { name: '108 р▓ир▓┐р▓░р▓Вр▓др▓░ р▓Ьр▓к', description: '108 р▓╡р▓░р│Жр▓Чр│Ж р▓ир▓┐р▓░р▓Вр▓др▓░ р▓кр│Нр▓░р▓нр│Бр▓кр▓╛р▓ж р▓Ьр▓к' }
        }
      }
    },
    {
      key: 'malayalam',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Malayalam',
      description: 'р┤ор┤▓р┤пр┤╛р┤│р┤В',
      content: {
        pageTitle: 'ЁЯХЙя╕П р┤ор┤╣р┤╛р┤ор┤ир╡Нр┤др╡Нр┤░ р┤Ьр┤кр┤В',
        currentRound: 'р┤ир┤┐р┤▓р┤╡р┤┐р┤▓р╡Ж р┤Ър┤Хр╡Нр┤░р┤В',
        roundsCompleted: 'р┤кр╡Вр╡╝р┤др╡Нр┤др┤┐р┤пр┤╛р┤п р┤Ър┤Хр╡Нр┤░р┤Щр╡Нр┤Щр╡╛',
        mahaRounds: 'р┤ор┤╣р┤╛ р┤Ър┤Хр╡Нр┤░р┤Щр╡Нр┤Щр╡╛',
        progressText: 'р┤ир┤┐р┤▓р┤╡р┤┐р┤▓р╡Ж р┤Ър┤Хр╡Нр┤░р┤др╡Нр┤др┤┐р╡╜ р┤Ьр┤кр┤Щр╡Нр┤Щр╡╛',
        dailyGoal: 'р┤жр╡Ир┤ир┤Вр┤жр┤┐р┤и р┤▓р┤Хр╡Нр┤╖р╡Нр┤пр┤В (16 р┤Ър┤Хр╡Нр┤░р┤Щр╡Нр┤Щр╡╛)',
        dailyGoalProgress: 'р┤Ър┤Хр╡Нр┤░р┤Щр╡Нр┤Щр╡╛ р┤кр╡Вр╡╝р┤др╡Нр┤др┤┐р┤пр┤╛р┤пр┤┐',
        chantText: 'р┤Ьр┤кр┤В',
        chantSubtext: 'р┤╣р┤░р╡З р┤Хр╡Гр┤╖р╡Нр┤г',
        mahamantra1: 'р┤╣р┤░р╡З р┤Хр╡Гр┤╖р╡Нр┤г р┤╣р┤░р╡З р┤Хр╡Гр┤╖р╡Нр┤г р┤Хр╡Гр┤╖р╡Нр┤г р┤Хр╡Гр┤╖р╡Нр┤г р┤╣р┤░р╡З р┤╣р┤░р╡З',
        mahamantra2: 'р┤╣р┤░р╡З р┤░р┤╛р┤о р┤╣р┤░р╡З р┤░р┤╛р┤о р┤░р┤╛р┤о р┤░р┤╛р┤о р┤╣р┤░р╡З р┤╣р┤░р╡З',
        sriKrishnaCaitanyaMantra: 'р┤Ьр┤пр╡Н р┤╢р╡Нр┤░р╡А р┤Хр╡Гр┤╖р╡Нр┤г р┤Ър╡Ир┤др┤ир╡Нр┤п р┤кр╡Нр┤░р┤нр╡Б р┤ир┤┐р┤др╡Нр┤пр┤╛р┤ир┤ир╡Нр┤ж р┤╢р╡Нр┤░р╡А р┤Ер┤жр╡Нр┤╡р╡Ир┤д р┤Чр┤жр┤╛р┤зр┤░ р┤╢р╡Нр┤░р╡Ар┤╡р┤╛р┤╕р┤╛р┤жр┤┐ р┤Чр╡Чр┤░ р┤нр┤Хр╡Нр┤д р┤╡р╡Гр┤ир╡Нр┤ж',
        prabhupadaMantra1: 'р┤ир┤ор┤Г р┤Ур┤В р┤╡р┤┐р┤╖р╡Нр┤гр╡Бр┤кр┤╛р┤жр┤╛р┤п р┤Хр╡Гр┤╖р╡Нр┤г р┤кр╡Нр┤░р╡Зр┤╖р╡Нр┤ер┤╛р┤п р┤нр╡Вр┤др┤▓р╡З р┤╢р╡Нр┤░р╡Ар┤ор┤др╡З р┤нр┤Хр╡Нр┤др┤┐р┤╡р╡Зр┤жр┤╛р┤ир╡Нр┤д р┤╕р╡Нр┤╡р┤╛р┤ор┤┐р┤ир╡НтАН р┤Зр┤др┤┐ р┤ир┤╛р┤ор┤┐р┤ир╡З',
        prabhupadaMantra2: 'р┤ир┤ор┤╕р╡Нр┤др╡З р┤╕р┤╛р┤░р┤╕р╡Нр┤╡р┤др╡З р┤жр╡Зр┤╡р╡З р┤Чр╡Чр┤░ р┤╡р┤╛р┤гр┤┐ р┤кр╡Нр┤░р┤Ър┤╛р┤░р┤┐р┤гр╡З р┤ир┤┐р┤░р╡НтАНр┤╡р┤┐р┤╢р╡Зр┤╖ р┤╢р╡Вр┤ир╡Нр┤пр┤╡р┤╛р┤жр┤┐р┤В р┤кр┤╛р┤╢р╡Нр┤Ър┤╛р┤др╡Нр┤п р┤жр╡Зр┤╢ р┤др┤╛р┤░р┤┐р┤гр╡З',
        resetCurrentRoundToast: 'ЁЯФД р┤ир┤┐р┤▓р┤╡р┤┐р┤▓р╡Ж р┤Ър┤Хр╡Нр┤░р┤В р┤▒р╡Ар┤╕р╡Жр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤др╡Б! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД р┤кр╡Вр╡╝р┤др╡Нр┤др┤┐р┤пр┤╛р┤п р┤Ър┤Хр╡Нр┤░р┤Щр╡Нр┤Щр╡╛ р┤▒р╡Ар┤╕р╡Жр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤др╡Б! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД р┤ор┤╣р┤╛ р┤Ър┤Хр╡Нр┤░р┤Щр╡Нр┤Щр╡╛ р┤▒р╡Ар┤╕р╡Жр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤др╡Б! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД р┤Ор┤▓р╡Нр┤▓р┤╛ р┤кр╡Бр┤░р╡Лр┤Чр┤др┤┐р┤пр╡Бр┤В р┤╡р┤┐р┤Ьр┤пр┤Хр┤░р┤ор┤╛р┤пр┤┐ р┤▒р╡Ар┤╕р╡Жр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤др╡Б! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ р┤Ер┤нр┤┐р┤ир┤ир╡Нр┤жр┤ир┤Щр╡Нр┤Щр╡╛! р┤╢р╡Нр┤░р╡А р┤Хр╡Гр┤╖р╡Нр┤г р┤нр┤Чр┤╡р┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р┤┐р╡╜ р┤╕р┤ир╡Нр┤др╡Лр┤╖р┤др╡Нр┤др┤┐р┤▓р┤╛р┤гр╡Н!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ р┤Ер┤нр┤┐р┤ир┤ир╡Нр┤жр┤ир┤Щр╡Нр┤Щр╡╛! р┤╢р╡Нр┤░р╡Ар┤▓ р┤кр╡Нр┤░р┤нр╡Бр┤кр┤╛р┤жр╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р┤┐р╡╜ р┤╕р┤ир╡Нр┤др╡Лр┤╖р┤др╡Нр┤др┤┐р┤▓р┤╛р┤гр╡Н!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'р┤Ор┤▓р╡Нр┤▓р┤╛ р┤кр╡Бр┤░р╡Лр┤Чр┤др┤┐р┤пр╡Бр┤В р┤▒р╡Ар┤╕р╡Жр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х',
        resetAllConfirmMessage: 'р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ор┤▓р╡Нр┤▓р┤╛ р┤Ьр┤к р┤кр╡Бр┤░р╡Лр┤Чр┤др┤┐р┤пр╡Бр┤В р┤▒р╡Ар┤╕р╡Жр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤пр┤╛р╡╗ р┤Йр┤▒р┤кр╡Нр┤кр┤╛р┤гр╡Л? р┤Зр┤др╡Н р┤ир┤┐р┤▓р┤╡р┤┐р┤▓р╡Ж р┤Ър┤Хр╡Нр┤░р┤В, р┤кр╡Вр╡╝р┤др╡Нр┤др┤┐р┤пр┤╛р┤п р┤Ър┤Хр╡Нр┤░р┤Щр╡Нр┤Щр╡╛, р┤ор┤╣р┤╛ р┤Ър┤Хр╡Нр┤░р┤Щр╡Нр┤Щр╡╛ р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр╡Ж р┤▒р╡Ар┤╕р╡Жр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤В. р┤И р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤В р┤кр┤┐р╡╗р┤╡р┤▓р┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр┤┐р┤▓р╡Нр┤▓.',
        soundOptions: {
          none: { name: 'р┤╢р┤мр╡Нр┤жр┤ор┤┐р┤▓р╡Нр┤▓', description: 'р┤ир┤┐р┤╢р╡Нр┤╢р┤мр╡Нр┤ж р┤Ьр┤кр┤В' },
          tick: { name: 'р┤Яр┤┐р┤Хр╡Нр┤Хр╡Н р┤╢р┤мр╡Нр┤жр┤В', description: 'р┤Яр┤┐р┤Хр╡Нр┤Хр╡Н р┤╢р┤мр╡Нр┤жр┤др╡Нр┤др╡Лр┤Яр╡Ж р┤Ьр┤кр┤В' },
          prabhupada: { name: 'р┤кр╡Нр┤░р┤нр╡Бр┤кр┤╛р┤жр╡Н', description: 'р┤кр╡Нр┤░р┤нр╡Бр┤кр┤╛р┤жр┤┐р┤ир╡Кр┤кр╡Нр┤кр┤В р┤Ьр┤кр┤В' },
          continuous: { name: '108 р┤др╡Бр┤Яр╡╝р┤Ър╡Нр┤Ър┤пр┤╛р┤п р┤Ьр┤кр┤В', description: '108 р┤╡р┤░р╡Ж р┤др╡Бр┤Яр╡╝р┤Ър╡Нр┤Ър┤пр┤╛р┤п р┤кр╡Нр┤░р┤нр╡Бр┤кр┤╛р┤жр╡Н р┤Ьр┤кр┤В' }
        },
      
      }
    },
    {
      key: 'marathi',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Marathi',
      description: 'рдорд░рд╛рдареА',
      content: {
        pageTitle: 'ЁЯХЙя╕П рдорд╣рд╛рдордВрддреНрд░ рдЬрдк',
        currentRound: 'рд╡рд░реНрддрдорд╛рди рдЪрдХреНрд░',
        roundsCompleted: 'рдкреВрд░реНрдг рдЭрд╛рд▓реЗрд▓реЗ рдЪрдХреНрд░реЗ',
        mahaRounds: 'рдорд╣рд╛ рдЪрдХреНрд░реЗ',
        progressText: 'рд╡рд░реНрддрдорд╛рди рдЪрдХреНрд░рд╛рдд рдЬрдк',
        dailyGoal: 'рджреИрдирд┐рдХ рд▓рдХреНрд╖реНрдп (16 рдЪрдХреНрд░реЗ)',
        dailyGoalProgress: 'рдЪрдХреНрд░реЗ рдкреВрд░реНрдг рдЭрд╛рд▓реА',
        chantText: 'рдЬрдк',
        chantSubtext: 'рд╣рд░реЗ рдХреГрд╖реНрдг',
        mahamantra1: 'рд╣рд░реЗ рдХреГрд╖реНрдг рд╣рд░реЗ рдХреГрд╖реНрдг рдХреГрд╖реНрдг рдХреГрд╖реНрдг рд╣рд░реЗ рд╣рд░реЗ',
        mahamantra2: 'рд╣рд░реЗ рд░рд╛рдо рд╣рд░реЗ рд░рд╛рдо рд░рд╛рдо рд░рд╛рдо рд╣рд░реЗ рд╣рд░реЗ',
        sriKrishnaCaitanyaMantra: 'рдЬрдп рд╢реНрд░реА рдХреГрд╖реНрдг рдЪреИрддрдиреНрдп рдкреНрд░рднреБ рдирд┐рддреНрдпрдирдВрдж рд╢реНрд░реА рдЕрджреНрд╡реИрдд рдЧрджрд╛рдзрд░ рд╢реНрд░реАрд╡рд╛рд╕рд╛рджрд┐ рдЧреМрд░ рднрдХреНрдд рд╡реГрдВрджрд╛',
        prabhupadaMantra1: 'рдирдордГ рдУрдВ рд╡рд┐рд╖реНрдгреБрдкрд╛рджрд╛рдп рдХреГрд╖реНрдг рдкреНрд░реЗрд╖реНрдард╛рдп рднреВрддрд▓реЗ рд╢реНрд░реАрдорддреЗ рднрдХреНрддрд┐рд╡реЗрджрд╛рдиреНрдд рд╕реНрд╡рд╛рдорд┐рди рдЗрддрд┐ рдирд╛рдорд┐рди',
        prabhupadaMantra2: 'рдирдорд╕реНрддреЗ рд╕рд╛рд░рд╕реНрд╡рддреЗ рджреЗрд╡рдГ рдЧреМрд░ рд╡рд╛рдгреА рдкреНрд░рдЪрд╛рд░рд┐рдгреЗ рдирд┐рд░рд╡рд┐рд╢реЗрд╖ рд╢реВрдиреНрдпрд╡рд╛рджрд┐рдиреН рдкрд╢реНрдЪрд┐рдо рджреЗрд╢ рддрд╛рд░рд┐рдгреЗ',
        resetCurrentRoundToast: 'ЁЯФД рд╡рд░реНрддрдорд╛рди рдЪрдХреНрд░ рд░реАрд╕реЗрдЯ рдЭрд╛рд▓реЗ! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД рдкреВрд░реНрдг рдЭрд╛рд▓реЗрд▓реЗ рдЪрдХреНрд░реЗ рд░реАрд╕реЗрдЯ рдЭрд╛рд▓реА! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД рдорд╣рд╛ рдЪрдХреНрд░реЗ рд░реАрд╕реЗрдЯ рдЭрд╛рд▓реА! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД рд╕рд░реНрд╡ рдкреНрд░рдЧрддреА рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рд░реАрд╕реЗрдЯ рдЭрд╛рд▓реА! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ рдЕрднрд┐рдирдВрджрди! рднрдЧрд╡рд╛рди рдХреГрд╖реНрдг рдЖрдкрд▓реНрдпрд╛рд╡рд░ рдЖрдирдВрджрд┐рдд рдЖрд╣реЗрдд!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ рдЕрднрд┐рдирдВрджрди! рд╢реНрд░реАрд▓ рдкреНрд░рднреБрдкрд╛рдж рдЖрдкрд▓реНрдпрд╛рд╡рд░ рдЖрдирдВрджрд┐рдд рдЖрд╣реЗрдд!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'рд╕рд░реНрд╡ рдкреНрд░рдЧрддреА рд░реАрд╕реЗрдЯ рдХрд░рд╛',
        resetAllConfirmMessage: 'рдЖрдкрдг рдЖрдкрд▓реНрдпрд╛ рд╕рд░реНрд╡ рдЬрдк рдкреНрд░рдЧрддреА рд░реАрд╕реЗрдЯ рдХрд░реВ рдЗрдЪреНрдЫрд┐рддрд╛ рдХрд╛? рд╣реЗ рд╡рд░реНрддрдорд╛рди рдЪрдХреНрд░, рдкреВрд░реНрдг рдЭрд╛рд▓реЗрд▓реЗ рдЪрдХреНрд░реЗ рдЖрдгрд┐ рдорд╣рд╛ рдЪрдХреНрд░реЗ рд░реАрд╕реЗрдЯ рдХрд░реЗрд▓. рд╣реА рдХреНрд░рд┐рдпрд╛ рдкреВрд░реНрд╡рд╡рдд рдХреЗрд▓реА рдЬрд╛рдК рд╢рдХрдд рдирд╛рд╣реА.',
         soundOptions: {
          none: { name: 'рдЖрд╡рд╛рдЬ рдирд╛рд╣реА', description: 'рдореМрди рдЬрдк' },
          tick: { name: 'рдЯрд┐рдХ рдЖрд╡рд╛рдЬ', description: 'рдЯрд┐рдХ рдЖрд╡рд╛рдЬрд╛рд╕рд╣ рдЬрдк' },
          prabhupada: { name: 'рдкреНрд░рднреБрдкрд╛рдж', description: 'рдкреНрд░рднреБрдкрд╛рджрд╛рдВрд╕рд╣ рдЬрдк' },
          continuous: { name: 'резрежрео рд╕рд▓рдЧ рдЬрдк', description: 'резрежрео рдкрд░реНрдпрдВрдд рд╕рд▓рдЧ рдкреНрд░рднреБрдкрд╛рдж рдЬрдк' }
        }
      }
    },
    {
      key: 'gujarati',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Gujarati',
      description: 'ркЧрлБркЬрк░рк╛ркдрлА',
      content: {
        pageTitle: 'ЁЯХЙя╕П ркорк╣рк╛ркоркВркдрлНрк░ ркЬркк',
        currentRound: 'рк╡рк░рлНркдркорк╛рки ркЪркХрлНрк░',
        roundsCompleted: 'рккрлВрк░рлНркг ркеркпрлЗрк▓ ркЪркХрлНрк░рлЛ',
        mahaRounds: 'ркорк╣рк╛ ркЪркХрлНрк░рлЛ',
        progressText: 'рк╡рк░рлНркдркорк╛рки ркЪркХрлНрк░ркорк╛ркВ ркЬркк',
        dailyGoal: 'ркжрлИркирк┐ркХ рк▓ркХрлНрк╖рлНркп (16 ркЪркХрлНрк░рлЛ)',
        dailyGoalProgress: 'ркЪркХрлНрк░рлЛ рккрлВрк░рлНркг ркеркпрлЗрк▓',
        chantText: 'ркЬркк',
        chantSubtext: 'рк╣рк░рлЗ ркХрлГрк╖рлНркг',
        mahamantra1: 'рк╣рк░рлЗ ркХрлГрк╖рлНркг рк╣рк░рлЗ ркХрлГрк╖рлНркг ркХрлГрк╖рлНркг ркХрлГрк╖рлНркг рк╣рк░рлЗ рк╣рк░рлЗ',
        mahamantra2: 'рк╣рк░рлЗ рк░рк╛рко рк╣рк░рлЗ рк░рк╛рко рк░рк╛рко рк░рк╛рко рк╣рк░рлЗ рк╣рк░рлЗ',
        sriKrishnaCaitanyaMantra: 'ркЬрлИ рк╢рлНрк░рлА ркХрлГрк╖рлНркг ркЪрлИркдркирлНркп рккрлНрк░ркнрлБ ркирк┐ркдрлНркпрк╛ркиркВркж рк╢рлНрк░рлА ркЕркжрлНрк╡рлИркд ркЧркжрк╛ркзрк░ рк╢рлНрк░рлАрк╡рк╛рк╕рк╛ркжрк┐ ркЧрлМрк░ ркнркХрлНркд рк╡рлГркВркж',
        prabhupadaMantra1: 'ркиркоркГ ркУркВ рк╡рк┐рк╖рлНркгрлБрккрк╛ркжрк╛ркп ркХрлГрк╖рлНркг рккрлНрк░рлЗрк╖рлНркарк╛ркп ркнрлВркдрк▓рлЗ рк╢рлНрк░рлАркоркдрлЗ ркнркХрлНркдрк┐рк╡рлЗркжрк╛ркВркд рк╕рлНрк╡рк╛ркорк┐рки ркЗркдрк┐ ркирк╛ркорк┐рки',
        prabhupadaMantra2: 'ркиркорк╕рлНркдрлЗ рк╕рк╛рк░рк╢рлНрк╡ркдрлЗ ркжрлЗрк╡ркГ ркЧрлМрк░ рк╡рк╛ркгрлА рккрлНрк░ркЪрк╛рк░рк┐ркгрлЗ ркирк┐рк░рк╡рк┐рк╢рлЗрк╖ рк╢рлВркирлНркпрк╡рк╛ркжрк┐рки рккрк╢рлНркЪрк┐рко ркжрлЗрк╢ ркдрк╛рк░рк┐ркгрлЗ',
        resetCurrentRoundToast: 'ЁЯФД рк╡рк░рлНркдркорк╛рки ркЪркХрлНрк░ рк░рлАрк╕рлЗркЯ ркеркпрлБркВ! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД рккрлВрк░рлНркг ркеркпрлЗрк▓ ркЪркХрлНрк░рлЛ рк░рлАрк╕рлЗркЯ ркеркпрк╛! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД ркорк╣рк╛ ркЪркХрлНрк░рлЛ рк░рлАрк╕рлЗркЯ ркеркпрк╛! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД ркдркорк╛рко рккрлНрк░ркЧркдрк┐ рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ рк░рлАрк╕рлЗркЯ ркеркИ! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ ркЕркнрк┐ркиркВркжрки! ркнркЧрк╡рк╛рки ркХрлГрк╖рлНркг ркдркорк╛рк░рк╛ рккрк░ ркЖркиркВркжрк┐ркд ркЫрлЗ!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ ркЕркнрк┐ркиркВркжрки! рк╢рлНрк░рлАрк▓ рккрлНрк░ркнрлБрккрк╛ркж ркдркорк╛рк░рк╛ рккрк░ ркЖркиркВркжрк┐ркд ркЫрлЗ!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'ркдркорк╛рко рккрлНрк░ркЧркдрк┐ рк░рлАрк╕рлЗркЯ ркХрк░рлЛ',
        resetAllConfirmMessage: 'рк╢рлБркВ ркдркорлЗ ркдркорк╛рк░рлА ркдркорк╛рко ркЬркк рккрлНрк░ркЧркдрк┐ркирлЗ рк░рлАрк╕рлЗркЯ ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркЦрк╛ркдрк░рлА ркЫрлЛ? ркЖ рк╡рк░рлНркдркорк╛рки ркЪркХрлНрк░, рккрлВрк░рлНркг ркеркпрлЗрк▓ ркЪркХрлНрк░рлЛ ркЕркирлЗ ркорк╣рк╛ ркЪркХрлНрк░рлЛркирлЗ рк░рлАрк╕рлЗркЯ ркХрк░рк╢рлЗ. ркЖ ркХрлНрк░рк┐ркпрк╛ рккрк╛ркЫрлА ркЦрлЗркВркЪрлА рк╢ркХрк╛ркдрлА ркиркерлА.',
        soundOptions: {
          none: { name: 'ркХрлЛркИ ркЕрк╡рк╛ркЬ ркиркерлА', description: 'ркорлМрки ркЬркк' },
          tick: { name: 'ркЯрк┐ркХ ркЕрк╡рк╛ркЬ', description: 'ркЯрк┐ркХ ркЕрк╡рк╛ркЬ рк╕рк╛ркерлЗ ркЬркк' },
          prabhupada: { name: 'рккрлНрк░ркнрлБрккрк╛ркж', description: 'рккрлНрк░ркнрлБрккрк╛ркж рк╕рк╛ркерлЗ ркЬркк' },
          continuous: { name: 'рлзрлжрло рк╕ркдркд ркЬркк', description: 'рлзрлжрло рк╕рлБркзрлА рк╕ркдркд рккрлНрк░ркнрлБрккрк╛ркж ркЬркк' }
        }
      }
    },
    {
      key: 'bengali',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Bengali',
      description: 'ржмрж╛ржВрж▓рж╛',
      content: {
        pageTitle: 'ЁЯХЙя╕П ржорж╣рж╛ржоржирзНрждрзНрж░ ржЬржк',
        currentRound: 'ржмрж░рзНрждржорж╛ржи ржЪржХрзНрж░',
        roundsCompleted: 'рж╕ржорзНржкржирзНржи ржЪржХрзНрж░',
        mahaRounds: 'ржорж╣рж╛ ржЪржХрзНрж░',
        progressText: 'ржмрж░рзНрждржорж╛ржи ржЪржХрзНрж░рзЗ ржЬржк',
        dailyGoal: 'ржжрзИржирж┐ржХ рж▓ржХрзНрж╖рзНржп (16 ржЪржХрзНрж░)',
        dailyGoalProgress: 'ржЪржХрзНрж░ рж╕ржорзНржкржирзНржи',
        chantText: 'ржЬржк',
        chantSubtext: 'рж╣рж░рзЗ ржХрзГрж╖рзНржг',
        mahamantra1: 'рж╣рж░рзЗ ржХрзГрж╖рзНржг рж╣рж░рзЗ ржХрзГрж╖рзНржг ржХрзГрж╖рзНржг ржХрзГрж╖рзНржг рж╣рж░рзЗ рж╣рж░рзЗ',
        mahamantra2: 'рж╣рж░рзЗ рж░рж╛ржо рж╣рж░рзЗ рж░рж╛ржо рж░рж╛ржо рж░рж╛ржо рж╣рж░рзЗ рж╣рж░рзЗ',
        sriKrishnaCaitanyaMantra: 'ржЬржпрж╝ рж╢рзНрж░рзА ржХрзГрж╖рзНржг ржЪрзИрждржирзНржп ржкрзНрж░ржнрзБ ржирж┐рждрзНржпрж╛ржиржирзНржж рж╢рзНрж░рзА ржЕржжрзНржмрзИржд ржЧржжрж╛ржзрж░ рж╢рзНрж░рзАржмрж╛рж╕рж╛ржжрзА ржЧрзМрж░ ржнржХрзНржд ржмрзГржирзНржж',
        prabhupadaMantra1: 'ржиржоржГ ржУржБ ржмрж┐рж╖рзНржгрзБржкрж╛ржжрж╛ржпрж╝ ржХрзГрж╖рзНржг ржкрзНрж░рзЗрж╖рзНржарж╛ржпрж╝ ржнрзВрждрж▓рзЗ рж╢рзНрж░рзАржорждрзЗ ржнржХрзНрждрж┐ржмрзЗржжрж╛ржирзНржд рж╕рзНржмрж╛ржорж┐ржи ржЗрждрж┐ ржирж╛ржорж┐ржи',
        prabhupadaMantra2: 'ржиржорж╕рзНрждрзЗ рж╕рж╛рж░рж╕рзНржмрждрзЗ ржжрзЗржмржГ ржЧрзМрж░ ржмрж╛ржгрзА ржкрзНрж░ржЪрж╛рж░рж┐ржгрзЗ ржирж┐рж░ржмрж┐рж╢рзЗрж╖ рж╢рзВржиреНрдпрд╡рд╛рджрж┐ржи ржкрж╢рзНржЪрж┐ржо ржжрзЗрж╢ рждрж╛рж░рж┐ржгрзЗ',
        resetCurrentRoundToast: 'ЁЯФД ржмрж░рзНрждржорж╛ржи ржЪржХрзНрж░ рж░рж┐рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД рж╕ржорзНржкржирзНржи ржЪржХрзНрж░ рж░рж┐рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД ржорж╣рж╛ ржЪржХрзНрж░ рж░рж┐рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД рж╕ржорж╕рзНржд ржкрзНрж░ржЧрждрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржнржЧржмрж╛ржи ржХрзГрж╖рзНржг ржЖржкржирж╛рж░ ржЙржкрж░ ржЖржиржирзНржжрж┐ржд! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ ржЕржнрж┐ржиржирзНржжржи! рж╢рзНрж░рзАрж▓ ржкрзНрж░ржнрзБржкрж╛ржж ржЖржкржирж╛рж░ ржЙржкрж░ ржЖржиржирзНржжрж┐ржд! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'рж╕ржорж╕рзНржд ржкрзНрж░ржЧрждрж┐ рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи',
        resetAllConfirmMessage: 'ржЖржкржирж┐ ржХрж┐ ржЖржкржирж╛рж░ рж╕ржорж╕рзНржд ржЬржк ржкрзНрж░ржЧрждрж┐ рж░рж┐рж╕рзЗржЯ ржХрж░рждрзЗ ржирж┐рж╢рзНржЪрж┐ржд? ржПржЯрж┐ ржмрж░рзНрждржорж╛ржи ржЪржХрзНрж░, рж╕ржорзНржкржирзНржи ржЪржХрзНрж░ ржПржмржВ ржорж╣рж╛ ржЪржХрзНрж░ рж░рж┐рж╕рзЗржЯ ржХрж░ржмрзЗред ржПржЗ ржХрзНрж░рж┐ржпрж╝рж╛ ржкрзВрж░рзНржмрж╛ржмрж╕рзНржерж╛ржпрж╝ ржлрж┐рж░рж┐ржпрж╝рзЗ ржирзЗржУржпрж╝рж╛ ржпрж╛ржмрзЗ ржирж╛ред',
        soundOptions: {
          none: { name: 'ржХрзЛржирзЛ рж╢ржмрзНржж ржирзЗржЗ', description: 'ржорзМржи ржЬржк' },
          tick: { name: 'ржЯрж┐ржХ рж╢ржмрзНржж', description: 'ржЯрж┐ржХ рж╢ржмрзНржж рж╕рж╣ ржЬржк' },
          prabhupada: { name: 'ржкрзНрж░ржнрзБржкрж╛ржж', description: 'ржкрзНрж░ржнрзБржкрж╛ржж рж╕рж╣ ржЬржк' },
          continuous: { name: 'рззрзжрзо ржЕржмрж┐рж░ржд ржЬржк', description: 'рззрзжрзо ржкрж░рзНржпржирзНржд ржЕржмрж┐рж░ржд ржкрзНрж░ржнрзБржкрж╛ржж ржЬржк' }
        }
      }
    },
    {
      key: 'punjabi',
      flag: 'ЁЯЗоЁЯЗ│',
      name: 'Punjabi',
      description: 'рикрй░риЬри╛римрйА',
      content: {
        pageTitle: 'ЁЯХЙя╕П риори╣ри╛риорй░ридрйНри░ риЬрик',
        currentRound: 'риорйМриЬрйВрижри╛ риЪрй▒риХри░',
        roundsCompleted: 'рикрйВри░рйЗ ри╣рйЛриП риЪрй▒риХри░',
        mahaRounds: 'риори╣ри╛ риЪрй▒риХри░',
        progressText: 'риорйМриЬрйВрижри╛ риЪрй▒риХри░ ри╡ри┐рй▒риЪ риЬрик',
        dailyGoal: 'рижрйИриирйАриХ рк▓ркХрлНрк╖рлНркп (16 риЪрй▒риХри░)',
        dailyGoalProgress: 'риЪрй▒риХри░ рикрйВри░рйЗ ри╣рйЛриП',
        chantText: 'риЬрик',
        chantSubtext: 'ри╣ри░рйЗ риХрйНри░ри┐ри╕ри╝риири╛',
        mahamantra1: 'ри╣ри░рйЗ риХрйНри░ри┐ри╕ри╝риири╛ ри╣ри░рйЗ риХрйНри░ри┐ри╕ри╝риири╛ риХрйНри░ри┐ри╕ри╝риири╛ риХрйНри░ри┐ри╕ри╝риири╛ ри╣ри░рйЗ ри╣ри░рйЗ',
        mahamantra2: 'ри╣ри░рйЗ ри░ри╛рио ри╣ри░рйЗ ри░ри╛рио ри░ри╛рио ри░ри╛рио ри╣ри░рйЗ ри╣ри░рйЗ',
        sriKrishnaCaitanyaMantra: 'риЬрйИ ри╕рйНри░рйА риХрйНри░ри┐ри╕ри╝риири╛ риЪрйИридриирйНрип рикрйНри░ринрйБ риири┐ридрйНрипри╛риирй░риж ри╕рйНри░рйА риЕрижрйНри╡рйИрид риЧрижри╛ризри░ ри╕рйНри░рйАри╡ри╛ри╕ри╛рижри┐ риЧрйМри░ ринриХрйНрид ри╡рйНри░ри┐рй░риж',
        prabhupadaMantra1: 'риириоркГ риУриВ ри╡ри┐ри╖рзНржгрйБрикри╛рижри╛рип ркХрлГрк╖рлНркг рккрлНрк░рлЗрк╖рлНркарк╛ркп ркнрлВркдрк▓рлЗ рк╢рлНрк░рлАркоркдрлЗ ркнркХрлНркдрк┐рк╡рлЗркжрк╛ркВркд рк╕рлНрк╡рк╛ркорк┐рки ркЗркдрк┐ ркирк╛ркорк┐рки',
        prabhupadaMantra2: 'риириори╕ридрйЗ рк╕рк╛рк░рк╢рлНрк╡ркдрлЗ ркжрлЗрк╡ркГ ркЧрлМрк░ рк╡рк╛ркгрлА рккрлНрк░ркЪрк╛рк░рк┐ркгрлЗ ркирк┐рк░рк╡рк┐рк╢рлЗрк╖ рк╢рлВркирлНркпрк╡рк╛ркжрк┐рки рккрк╢рлНркЪрк┐рко ркжрлЗрк╢ ркдрк╛рк░рк┐ркгрлЗ',
        resetCurrentRoundToast: 'ЁЯФД риорйМриЬрйВрижри╛ риЪрй▒риХри░ ри░рйАри╕рйИриЯ ри╣рйЛ риЧри┐риЖ! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД рикрйВри░рйЗ ри╣рйЛриП риЪрй▒риХри░ ри░рйАри╕рйИриЯ ри╣рйЛ риЧриП! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД риори╣ри╛ риЪрй▒риХри░ ри░рйАри╕рйИриЯ ри╣рйЛ риЧриП! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД ри╕ри╛ри░рйА рикрйНри░риЧридрйА ри╕рилри▓ридри╛рикрйВри░ри╡риХ ри░рйАри╕рйИриЯ ри╣рйЛ риЧриИ! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ римризри╛риИ ри╣рйЛ! ринриЧри╡ри╛рии риХрйНри░ри┐ри╕ри╝риири╛ ридрйБри╣ри╛рибрйЗ риЙрй▒ридрйЗ риЦрйБри╕ри╝ ри╣рии!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ римризри╛риИ ри╣рйЛ! ри╕ри╝рйНри░рйАри▓ рикрйНри░ринрйБрикри╛риж ридрйБри╣ри╛рибрйЗ риЙрй▒ридрйЗ риЦрйБри╕ри╝ ри╣рии!! ЁЯЩПтЬи',
        resetAllConfirmTitle: 'ри╕ри╛ри░рйА рикрйНри░риЧридрйА ри░рйАри╕рйИриЯ риХри░рйЛ',
        resetAllConfirmMessage: 'риХрйА ридрйБри╕рйАриВ риЖрикригрйА ри╕ри╛ри░рйА риЬрик рикрйНри░риЧридрйА риирйВрй░ ри░рйАри╕рйИриЯ риХри░рии ри▓риИ риприХрйАриирйА ри╣рйЛ? риЗри╣ риорйМриЬрйВрижри╛ риЪрй▒риХри░, рикрйВри░рйЗ ри╣рйЛриП риЪрй▒риХри░ риЕридрйЗ риори╣ри╛ риЪрй▒риХри░ риирйВрй░ ри░рйАри╕рйИриЯ риХри░рйЗриЧри╛ред риЗри╣ риХри╛ри░ри╡ри╛риИ ри╡ри╛рикри╕ риири╣рйАриВ ри▓ри┐риЖриИ риЬри╛ ри╕риХрижрйАред',
        soundOptions: {
          none: { name: 'риХрйЛриИ риЕри╡ри╛риЬри╝ риири╣рйАриВ', description: 'риорйМрии риЬрик' },
          tick: { name: 'риЯри┐риХ риЕри╡ри╛риЬри╝', description: 'риЯри┐риХ риЕри╡ри╛риЬри╝ риири╛ри▓ риЬрик' },
          prabhupada: { name: 'рикрйНри░ринрйБрикри╛риж', description: 'рикрйНри░ринрйБрикри╛риж риири╛ри▓ риЬрик' },
          continuous: { name: 'рйзрйжрйо ри╕ридрид риЬрик', description: 'рйзрйжрйо ридрй▒риХ ри╕ридрид рикрйНри░ринрйБрикри╛риж риЬрик' }
        }
      }
    },
    {
      key: 'urdu',
      flag: 'ЁЯЗ╡ЁЯЗ░',
      name: 'Urdu',
      description: '╪з╪▒╪п┘И',
      content: {
        pageTitle: 'ЁЯХЙя╕П ┘Е█Б╪з┘Е┘Ж╪к╪▒╪з ╪м╪з┘╛',
        currentRound: '┘Е┘И╪м┘И╪п█Б ┌Ж┌й╪▒',
        roundsCompleted: '┘Е┌й┘Е┘Д ┌Ж┌й╪▒',
        mahaRounds: '┘Е█Б╪з ┌Ж┌й╪▒',
        progressText: '┘Е┘И╪м┘И╪п█Б ┌Ж┌й╪▒ ┘Е█М┌║ ╪м╪з┘╛',
        dailyGoal: '╪▒┘И╪▓╪з┘Ж█Б █Б╪п┘Б (16 ┌Ж┌й╪▒)',
        dailyGoalProgress: '┌Ж┌й╪▒ ┘Е┌й┘Е┘Д █Б┘И╪ж█Т',
        chantText: '╪м╪з┘╛',
        chantSubtext: '█Б╪▒█Т ┌й╪▒╪┤┘Ж╪з',
        mahamantra1: '█Б╪▒█Т ┌й╪▒╪┤┘Ж╪з █Б╪▒█Т ┌й╪▒╪┤┘Ж╪з ┌й╪▒╪┤┘Ж╪з ┌й╪▒╪┤┘Ж╪з █Б╪▒█Т █Б╪▒█Т',
        mahamantra2: '█Б╪▒█Т ╪▒╪з┘Е █Б╪▒█Т ╪▒╪з┘Е ╪▒╪з┘Е ╪▒╪з┘Е █Б╪▒█Т █Б╪▒█Т',
        sriKrishnaCaitanyaMantra: '╪м█Т ╪┤╪▒█М ┌й╪▒╪┤┘Ж ┌Ж█М╪к┘Ж█М╪з ┘╛╪▒╪и┌╛┘И ┘Ж█М╪к█М┘Ж┘Ж╪п╪з ╪┤╪▒█М ╪з╪п┘И╪з╪ж╪к╪з ┌п╪п┌╛╪з╪п┌╛╪▒ ╪┤╪▒█М ┘И╪з╪│╪п█М ┌п┘И╪▒ ╪и┌╛┌й╪к ┘И┘Ж╪п',
        prabhupadaMantra1: '┘Ж┘О┘Е┘О█Б ╪з┘И┌║ ┘И┘Р╪┤┘Т┘Ж┘П┘И┘╛┘О╪з╪п┘О╪з█М ┌й┘П╪▒┘Т╪┤┘Т┘Ж┘О ┘╛┘Т╪▒┘О█М╪┤┘Т┘╣┌╛┘О╪з█М ╪и┘П┌╛┘И╪к┘О┘Д┘О█Т ╪┤╪▒█М ┘Е┘О╪к┘О█Т ╪и┘О┌╛┌й╪к┘Р┘И┘Р█М╪п┘О╪з┘Ж┘Т╪к ╪│┘Т┘И┘О╪з┘Е┘Р█М┘Т┘Ж ╪з┘Р╪к┘Р█М ┘Ж┘О╪з┘Е┘Р┘Ж',
        prabhupadaMantra2: '┘Ж┘О┘Е┘О╪│┘Т╪к┘О█Т ╪│┘О╪з╪▒┘О╪│┘Т┘И┘О╪к┘О█Т ╪п┘О█М┘Т┘И┘О█Б ┌п┘О┘И┘О╪▒ ┘И┘О╪з┘Ж┘Р█М ┘╛┘Т╪▒┘О┌Ж┘О╪з╪▒┘Р█М┘Т┘Ж┘О█Т ┘Ж┘Р╪▒┘О┘И┘Р╪┤┘О█М╪┤ ╪┤┘П┘И┘Ж┘Т█М┘О┘И╪з╪п┘Р┘Ж ┘╛┘О╪з╪┤┘Т┌Ж┘О╪з╪к┘Т█М ╪п┘О█М╪┤ ╪к┘О╪з╪▒┘Р█М┘Т┘Ж┘О█Т',
        resetCurrentRoundToast: 'ЁЯФД ┘Е┘И╪м┘И╪п█Б ┌Ж┌й╪▒ ╪▒█М ╪│█М┘╣ █Б┘И ┌п█М╪з! ЁЯЩП',
        resetRoundsCompletedToast: 'ЁЯФД ┘Е┌й┘Е┘Д ┌Ж┌й╪▒ ╪▒█М ╪│█М┘╣ █Б┘И ┌п╪ж█Т! ЁЯЩП',
        resetMahaRoundsToast: 'ЁЯФД ┘Е█Б╪з ┌Ж┌й╪▒ ╪▒█М ╪│█М┘╣ █Б┘И ┌п╪ж█Т! ЁЯЩП',
        resetAllProgressToast: 'ЁЯФД ╪к┘Е╪з┘Е ╪к╪▒┘В█М ┌й╪з┘Е█М╪з╪и█М ╪│█Т ╪▒█М ╪│█М┘╣ █Б┘И ┌п╪ж█М! ЁЯЩП',
        roundCompleteToast: 'ЁЯОЙ ┘Е╪и╪з╪▒┌й █Б┘И! ╪о╪п╪з ┌й╪▒╪┤┘Ж╪з ╪в┘╛ ┘╛╪▒ ╪о┘И╪┤ █Б█М┌║!! ЁЯЩП',
        mahaRoundCompleteToast: 'ЁЯМЯ ┘Е╪и╪з╪▒┌й █Б┘И! ╪┤╪▒█М┘Д ┘╛╪▒╪з╪и┌╛┘И┘╛╪з╪п ╪в┘╛ ┘╛╪▒ ╪о┘И╪┤ █Б█М┌║!! ЁЯЩПтЬи',
        resetAllConfirmTitle: '╪к┘Е╪з┘Е ╪к╪▒┘В█М ╪▒█М ╪│█М┘╣ ┌й╪▒█М┌║',
        resetAllConfirmMessage: '┌й█М╪з ╪в┘╛ ┘И╪з┘В╪╣█М ╪з┘╛┘Ж█М ╪к┘Е╪з┘Е ╪м╪з┘╛ ╪к╪▒┘В█М ┌й┘И ╪▒█М ╪│█М┘╣ ┌й╪▒┘Ж╪з ┌Ж╪з█Б╪к█Т █Б█М┌║╪Я █М█Б ┘Е┘И╪м┘И╪п█Б ┌Ж┌й╪▒╪М ┘Е┌й┘Е┘Д ┌Ж┌й╪▒ ╪з┘И╪▒ ┘Е█Б╪з ┌Ж┌й╪▒ ┌й┘И ╪▒█М ╪│█М┘╣ ┌й╪▒█Т ┌п╪з█Ф █М█Б ╪╣┘Е┘Д ┘И╪з┘╛╪│ ┘Ж█Б█М┌║ ┘Д█М╪з ╪м╪з ╪│┌й╪к╪з█Ф',
        soundOptions: {
          none: { name: '┌й┘И╪ж█М ╪в┘И╪з╪▓ ┘Ж█Б█М┌║', description: '╪о╪з┘Е┘И╪┤ ╪м╪з┘╛' },
          tick: { name: '┘╣┌й ╪в┘И╪з╪▓', description: '┘╣┌й ╪в┘И╪з╪▓ ┌й█Т ╪│╪з╪к┌╛ ╪м╪з┘╛' },
          prabhupada: { name: '┘╛╪▒╪и┌╛┘И┘╛╪з╪п', description: '┘╛╪▒╪и┌╛┘И┘╛╪з╪п ┌й█Т ╪│╪з╪к┌╛ ╪м╪з┘╛' },
          continuous: { name: '█▒█░█╕ ┘Е╪│┘Д╪│┘Д ╪м╪з┘╛', description: '█▒█░█╕ ╪к┌й ┘Е╪│┘Д╪│┘Д ┘╛╪▒╪и┌╛┘И┘╛╪з╪п ╪м╪з┘╛' }
        }
      }
    }
  ];

  // Sound options for the music selector (computed from current language)
  get soundOptions(): SoundOption[] {
    const icons = ['ЁЯФЗ', 'ЁЯФФ', 'ЁЯО╡', 'ЁЯФД'];
    const keys: ChantSoundType[] = ['none', 'tick', 'prabhupada', 'continuous'];
    const soundOptionsData = this.content?.soundOptions;
    
    if (!soundOptionsData) {
      // Fallback to English if content is not available
      return [
        { key: 'none', icon: 'ЁЯФЗ', name: 'No Sound', description: 'Silent chanting' },
        { key: 'tick', icon: 'ЁЯФФ', name: 'Tick Sound', description: 'Chant with tick sound' },
        { key: 'prabhupada', icon: 'ЁЯО╡', name: 'Prabhupada', description: 'Chant with Prabhupada' },
        { key: 'continuous', icon: 'ЁЯФД', name: '108 Continues Chanting', description: 'Continuous Prabhupada chanting until 108' }
      ];
    }
    
    return keys.map((key, index) => ({
      key,
      icon: icons[index],
      name: soundOptionsData[key].name,
      description: soundOptionsData[key].description
    }));
  }

  // Language options for the selector (derived from languageService)
  get languageOptions(): LanguageOption[] {
    return this.languageService.languageOptions;
  }

  // Current content (computed from selected language)
  get content(): LanguageContent {
    const currentLang = this.languageData.find(lang => lang.key === this.currentLanguage);
    return currentLang ? currentLang.content : this.languageData[0].content;
  }

  // Chanting counters
  currentRound: number = 0;
  roundsCompleted: number = 0;
  mahaRounds: number = 0;

  // Radial progress properties
  circumference: number = 0;
  strokeDashoffset: number = 0;
  radius: number = 100;

  // UI state
  showResetAlert: boolean = false;
  showToast: boolean = false;
  toastMessage: string = '';
  isLanguageSelectorOpen: boolean = false;
  isAudioPlaying: boolean = false;
  isContinuousPlaying: boolean = false;
  isContinuousPaused: boolean = false;
  
  // Sri Krishna Caitanya modal state
  showSriKrishnaCaitanyaModal: boolean = false;
  isSriKrishnaCaitanyaPlaying: boolean = false;
  
  // Prabhupada Mantra state
  isPrabhupadaMantraPlaying: boolean = false;

  // Audio elements
  private tickAudio: HTMLAudioElement | null = null;
  private prabhupadaAudio: HTMLAudioElement | null = null;
  private continuousAudio: HTMLAudioElement | null = null;
  private bellAudio: HTMLAudioElement | null = null;
  private sriKrishnaCaitanyaAudio: HTMLAudioElement | null = null;
  private prabhupadaMantraAudio: HTMLAudioElement | null = null;
  private lastCycleTime: number = 0;

  // Alert button configuration
  alertButtons = [
    {
      text: 'No',
      role: 'cancel',
      handler: () => {
        this.showResetAlert = false;
      }
    },
    {
      text: 'Yes, Reset',
      role: 'confirm',
      handler: () => {
        this.resetProgress();
      }
    }
  ];

  // Toast button configuration
  toastButtons = [
    {
      text: 'ЁЯЩП',
      role: 'cancel'
    }
  ];

  constructor(private themeService: ThemeService, private languageService: LanguageService) {
    addIcons({flowerOutline,refreshOutline,musicalNotesOutline,languageOutline,musicalNotes,closeOutline,playOutline,pauseOutline,bonfireOutline});
  }

  ngOnInit() {
    this.presentingElement = document.querySelector('.ion-page') as HTMLElement;
    
    // Subscribe to theme changes
    this.themeSubscription = this.themeService.currentTheme$.subscribe(theme => {
      this.themeClass = theme;
    });
    
    // Subscribe to language changes
    this.languageSubscription = this.languageService.currentLanguage$.subscribe(language => {
      this.currentLanguage = language;
    });
    
    // Initialize audio elements
    this.initializeAudio();
    
    // Calculate circle circumference for progress ring
    this.circumference = 2 * Math.PI * this.radius;
    this.strokeDashoffset = this.circumference;
    
    // Load saved progress
    this.loadProgress();
    
    // Update progress ring
    this.updateProgressRing();
  }

  ngAfterViewInit() {
    // Update progress ring after view is initialized
    this.updateProgressRing();
  }

  ngOnDestroy() {
    // Unsubscribe from theme changes
    this.themeSubscription.unsubscribe();
    
    // Unsubscribe from language changes
    this.languageSubscription.unsubscribe();
    
    // Clean up audio elements
    if (this.tickAudio) {
      this.tickAudio.pause();
      this.tickAudio = null;
    }
    if (this.prabhupadaAudio) {
      this.prabhupadaAudio.pause();
      this.prabhupadaAudio = null;
    }
    if (this.continuousAudio) {
      this.continuousAudio.pause();
      this.continuousAudio = null;
    }
    if (this.bellAudio) {
      this.bellAudio.pause();
      this.bellAudio = null;
    }
    if (this.sriKrishnaCaitanyaAudio) {
      this.sriKrishnaCaitanyaAudio.pause();
      this.sriKrishnaCaitanyaAudio = null;
    }
    if (this.prabhupadaMantraAudio) {
      this.prabhupadaMantraAudio.pause();
      this.prabhupadaMantraAudio = null;
    }
    
    // Reset continuous playing state
    this.isContinuousPlaying = false;
    this.isContinuousPaused = false;
  }

  chantSrilaPrabhupadaMantra() {
    try {
      if (this.prabhupadaMantraAudio) {
        this.prabhupadaMantraAudio.currentTime = 0;
        
        // Set up event listeners for state management
        this.prabhupadaMantraAudio.onplay = () => {
          this.isPrabhupadaMantraPlaying = true;
        };
        
        this.prabhupadaMantraAudio.onended = () => {
          this.isPrabhupadaMantraPlaying = false;
        };
        
        this.prabhupadaMantraAudio.onpause = () => {
          this.isPrabhupadaMantraPlaying = false;
        };
        
        this.prabhupadaMantraAudio.play().catch(e => console.warn('Prabhupada Mantra audio play failed:', e));
      }
    } catch (error) {
      console.warn('Prabhupada Mantra audio playback error:', error);
    }
  }

  // Initialize audio elements
  initializeAudio() {
    try {
      // Initialize tick sound
      this.tickAudio = new Audio('assets/music/single-tick.mp3');
      this.tickAudio.preload = 'auto';
      this.tickAudio.volume = 0.7;
      
      // Initialize Prabhupada chanting
      this.prabhupadaAudio = new Audio('assets/music/SrilaPrabhupadaChanting.mp3');
      this.prabhupadaAudio.preload = 'auto';
      this.prabhupadaAudio.volume = 0.8;
      
      // Initialize continuous Prabhupada chanting
      this.continuousAudio = new Audio('assets/music/SrilaPrabhupadaChanting.mp3');
      this.continuousAudio.preload = 'auto';
      this.continuousAudio.volume = 0.8;
      this.continuousAudio.loop = true; // Enable looping for continuous play
      
      // Initialize bell sound for round completion
      this.bellAudio = new Audio('assets/music/bellshort.mp3');
      this.bellAudio.preload = 'auto';
      this.bellAudio.volume = 0.9;
      
      // Initialize Sri Krishna Caitanya audio
      this.sriKrishnaCaitanyaAudio = new Audio('assets/music/sriKrishnaChaitanya.mp3');
      this.sriKrishnaCaitanyaAudio.preload = 'auto';
      this.sriKrishnaCaitanyaAudio.volume = 0.8;
      
      // Initialize Prabhupada Mantra audio
      this.prabhupadaMantraAudio = new Audio('assets/music/Prabhupada mantra.mp3');
      this.prabhupadaMantraAudio.preload = 'auto';
      this.prabhupadaMantraAudio.volume = 0.8;
      
      // Add event listener for Prabhupada audio completion
      this.prabhupadaAudio.addEventListener('ended', () => {
        this.isAudioPlaying = false;
      });
      
      // Add event listeners for continuous audio
      this.continuousAudio.addEventListener('ended', () => {
        // This shouldn't fire due to loop=true, but just in case
        if (this.isContinuousPlaying && this.currentRound < 108) {
          this.continuousAudio?.play().catch(e => console.warn('Continuous audio restart failed:', e));
        }
      });
      
      // Add event listener for audio time updates to detect when one cycle completes
      this.continuousAudio.addEventListener('timeupdate', () => {
        if (this.currentSoundMode === 'continuous' && this.isContinuousPlaying && !this.isContinuousPaused) {
          // Get the duration and current time
          const duration = this.continuousAudio?.duration || 0;
          const currentTime = this.continuousAudio?.currentTime || 0;
          
          // Detect loop restart (currentTime jumps back to beginning)
          if (duration > 0 && this.lastCycleTime > 0 && currentTime < this.lastCycleTime * 0.5) {
            this.onContinuousAudioCycleComplete();
          }
          
          this.lastCycleTime = currentTime;
        }
      });
      
      // Add error handlers
      this.tickAudio.addEventListener('error', (e) => {
        console.warn('Tick audio failed to load:', e);
      });
      
      this.prabhupadaAudio.addEventListener('error', (e) => {
        console.warn('Prabhupada audio failed to load:', e);
      });
      
      this.continuousAudio.addEventListener('error', (e) => {
        console.warn('Continuous audio failed to load:', e);
      });
      
      this.bellAudio.addEventListener('error', (e) => {
        console.warn('Bell audio failed to load:', e);
      });
      
      this.sriKrishnaCaitanyaAudio.addEventListener('error', (e) => {
        console.warn('Sri Krishna Caitanya audio failed to load:', e);
      });
      
      this.prabhupadaMantraAudio.addEventListener('error', (e) => {
        console.warn('Prabhupada Mantra audio failed to load:', e);
      });
      
    } catch (error) {
      console.warn('Audio initialization failed:', error);
    }
  }

  // Save progress to localStorage
  saveProgress() {
    const progress = {
      currentRound: this.currentRound,
      roundsCompleted: this.roundsCompleted,
      mahaRounds: this.mahaRounds,
      currentSoundMode: this.currentSoundMode
    };
    localStorage.setItem('chantProgress', JSON.stringify(progress));
  }

  // Load progress from localStorage
  loadProgress() {
    const savedProgress = localStorage.getItem('chantProgress');
    if (savedProgress) {
      const progress = JSON.parse(savedProgress);
      this.currentRound = progress.currentRound || 0;
      this.roundsCompleted = progress.roundsCompleted || 0;
      this.mahaRounds = progress.mahaRounds || 0;
      this.currentSoundMode = progress.currentSoundMode || 'none';
    }
  }

  // Update the radial progress ring
  updateProgressRing() {
    const progress = this.currentRound / 108;
    const offset = this.circumference - (progress * this.circumference);
    this.strokeDashoffset = offset;
  }

  // Main chanting action
  chant() {
    // If Prabhupada audio is playing, block the click
    if (this.isAudioPlaying && this.currentSoundMode === 'prabhupada') {
      return; // Don't process the click
    }
    
    // For continuous mode, just start/stop the audio, don't increment counter manually
    if (this.currentSoundMode === 'continuous') {
      this.playChantSound();
      return;
    }
    
    // Play the appropriate sound
    this.playChantSound();
    
    // Increment the counter (only for non-continuous modes)
    this.currentRound++;
    
    if (this.currentRound >= 108) {
      // Round completed
      this.currentRound = 0;
      this.roundsCompleted++;
      
      // Play bell sound for round completion
      this.playBellSound();
      
      this.showToastMessage(this.content.roundCompleteToast);
      
      if (this.roundsCompleted >= 16) {
        // Maha round completed
        this.roundsCompleted = 0;
        this.mahaRounds++;
        this.showToastMessage(this.content.mahaRoundCompleteToast);
      }
    }
    
    this.updateProgressRing();
    this.saveProgress();
  }

  // Play the appropriate chant sound
  private playChantSound() {
    try {
      if (this.currentSoundMode === 'none') {
        // No sound, just return
        return;
      } else if (this.currentSoundMode === 'tick' && this.tickAudio) {
        // Reset the audio to beginning and play
        this.tickAudio.currentTime = 0;
        this.tickAudio.play().catch(e => console.warn('Tick audio play failed:', e));
      } else if (this.currentSoundMode === 'prabhupada' && this.prabhupadaAudio) {
        // Only play if not already playing
        if (!this.isAudioPlaying) {
          this.isAudioPlaying = true;
          this.prabhupadaAudio.currentTime = 0;
          this.prabhupadaAudio.play()
            .then(() => {
              // Audio started playing successfully
            })
            .catch(e => {
              console.warn('Prabhupada audio play failed:', e);
              this.isAudioPlaying = false; // Reset flag if play failed
            });
        }
      } else if (this.currentSoundMode === 'continuous' && this.continuousAudio) {
        // Toggle play/pause for continuous mode
        this.toggleContinuousAudio();
      }
    } catch (error) {
      console.warn('Audio playback error:', error);
      this.isAudioPlaying = false; // Reset flag on error
      this.isContinuousPlaying = false; // Reset continuous flag on error
    }
  }

  // Handle continuous audio cycle completion
  private onContinuousAudioCycleComplete() {
    // Increment the counter automatically
    this.currentRound++;
    
    if (this.currentRound >= 108) {
      // Round completed
      this.currentRound = 0;
      this.roundsCompleted++;
      
      // Play bell sound for round completion
      this.playBellSound();
      
      this.showToastMessage(this.content.roundCompleteToast);
      
      // Stop continuous audio when round is completed
      if (this.isContinuousPlaying && this.continuousAudio) {
        this.continuousAudio.pause();
        this.isContinuousPlaying = false;
        this.isContinuousPaused = false;
      }
      
      if (this.roundsCompleted >= 16) {
        // Maha round completed
        this.roundsCompleted = 0;
        this.mahaRounds++;
        this.showToastMessage(this.content.mahaRoundCompleteToast);
      }
    }
    
    this.updateProgressRing();
    this.saveProgress();
  }

  // Toggle continuous audio play/pause
  toggleContinuousAudio() {
    if (!this.continuousAudio) return;
    
    if (this.isContinuousPlaying && !this.isContinuousPaused) {
      // Pause the audio
      this.continuousAudio.pause();
      this.isContinuousPaused = true;
    } else if (this.isContinuousPlaying && this.isContinuousPaused) {
      // Resume the audio
      this.continuousAudio.play().catch(e => console.warn('Continuous audio resume failed:', e));
      this.isContinuousPaused = false;
    } else {
      // Start the audio
      this.isContinuousPlaying = true;
      this.isContinuousPaused = false;
      this.lastCycleTime = 0; // Reset cycle tracking
      this.continuousAudio.currentTime = 0;
      this.continuousAudio.play().catch(e => {
        console.warn('Continuous audio play failed:', e);
        this.isContinuousPlaying = false;
      });
    }
  }

  // Play bell sound for round completion
  private playBellSound() {
    try {
      if (this.bellAudio) {
        this.bellAudio.currentTime = 0;
        this.bellAudio.play().catch(e => console.warn('Bell audio play failed:', e));
      }
    } catch (error) {
      console.warn('Bell audio playback error:', error);
    }
  }

  // Play Sri Krishna Caitanya audio
  playSriKrishnaCaitanyaAudio() {
    try {
      if (this.sriKrishnaCaitanyaAudio) {
        this.sriKrishnaCaitanyaAudio.currentTime = 0;
        
        // Set up event listeners
        this.sriKrishnaCaitanyaAudio.onplay = () => {
          this.isSriKrishnaCaitanyaPlaying = true;
          this.showSriKrishnaCaitanyaModal = true;
        };
        
        this.sriKrishnaCaitanyaAudio.onended = () => {
          this.isSriKrishnaCaitanyaPlaying = false;
          this.showSriKrishnaCaitanyaModal = false;
        };
        
        this.sriKrishnaCaitanyaAudio.onpause = () => {
          this.isSriKrishnaCaitanyaPlaying = false;
          this.showSriKrishnaCaitanyaModal = false;
        };
        
        this.sriKrishnaCaitanyaAudio.play().catch(e => console.warn('Sri Krishna Caitanya audio play failed:', e));
      }
    } catch (error) {
      console.warn('Sri Krishna Caitanya audio playback error:', error);
    }
  }

  // Close Sri Krishna Caitanya modal
  closeSriKrishnaCaitanyaModal() {
    this.showSriKrishnaCaitanyaModal = false;
    if (this.sriKrishnaCaitanyaAudio && !this.sriKrishnaCaitanyaAudio.paused) {
      this.sriKrishnaCaitanyaAudio.pause();
    }
  }

  // Show toast message
  showToastMessage(message: string) {
    this.toastMessage = message;
    this.showToast = true;
  }

  // Reset current round
  resetCurrentRound() {
    this.currentRound = 0;
    
    // Stop continuous audio when resetting current round
    if (this.isContinuousPlaying && this.continuousAudio) {
      this.continuousAudio.pause();
      this.isContinuousPlaying = false;
      this.isContinuousPaused = false;
    }
    
    this.updateProgressRing();
    this.saveProgress();
    this.showToastMessage(this.content.resetCurrentRoundToast);
  }

  // Reset rounds completed
  resetRoundsCompleted() {
    this.roundsCompleted = 0;
    this.saveProgress();
    this.showToastMessage(this.content.resetRoundsCompletedToast);
  }

  // Reset maha rounds
  resetMahaRounds() {
    this.mahaRounds = 0;
    this.saveProgress();
    this.showToastMessage(this.content.resetMahaRoundsToast);
  }

  // Show reset all confirmation
  showResetAllConfirmation() {
    this.showResetAlert = true;
  }

  // Reset all progress
  resetProgress() {
    this.currentRound = 0;
    this.roundsCompleted = 0;
    this.mahaRounds = 0;
    
    // Stop continuous audio when resetting all progress
    if (this.isContinuousPlaying && this.continuousAudio) {
      this.continuousAudio.pause();
      this.isContinuousPlaying = false;
      this.isContinuousPaused = false;
    }
    
    this.updateProgressRing();
    this.saveProgress();
    this.showResetAlert = false;
    this.showToastMessage(this.content.resetAllProgressToast);
  }

  // Change language
  changeLanguage(language: LanguageType) {
    this.languageService.setLanguage(language);
  }

  // Show language selector
  showLanguageSelector() {
    this.isLanguageSelectorOpen = true;
  }

  // Set language and close selector
  setLanguage(language: LanguageType) {
    this.changeLanguage(language);
    this.isLanguageSelectorOpen = false;
  }

  // Handle language change from dropdown
  onLanguageChange(event: any) {
    const selectedLanguage = event.detail.value as LanguageType;
    this.languageService.setLanguage(selectedLanguage);
  }

  // Set sound mode
  setSoundMode(soundMode: ChantSoundType) {
    // Stop continuous audio if switching away from continuous mode
    if (this.currentSoundMode === 'continuous' && soundMode !== 'continuous' && this.isContinuousPlaying && this.continuousAudio) {
      this.continuousAudio.pause();
      this.isContinuousPlaying = false;
      this.isContinuousPaused = false;
    }
    
    this.currentSoundMode = soundMode;
    this.saveProgress();
  }

  // Get current daily goal progress percentage
  get dailyGoalProgress(): number {
    return Math.min((this.roundsCompleted / 16) * 100, 100);
  }
}
